# -*- coding: utf-8 -*-
"""30DecQuestions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AEoZBR-2mjtBu1pTPsq4ZAYp7b_AW0C8

# Question 1

with function
"""

def add(a,b):
  return a+b
def sub(a,b):
  return a-b
def mul(a,b):
  return a*b

c=int(input("Enter the first number: "))
d=int(input("Enter the second number: "))

print("Addition : ", add(c,d))
print("Subraction : ", sub(c,d))
print("Multiplication : ", mul(c,d))

"""without function"""

c=int(input("Enter the first number: "))
  d=int(input("Enter the second number: "))
  add= c+d
  sub= c-d
  mul= c*d
  print("Addition : ", add)
  print("Subraction : ", sub)
  print("Multiplication : ", mul)

"""#Question 2

With function
"""

def SI(p,r,t):
  return (p*r*t)/100
def CI(p,r,t):
  return p*(1+(r/100))**t - p
p = float(input("Enter the principal amount : "))
r = float(input("Enter the rate :"))
t = float(input("Enter the time :"))
print("Simpe Intrest : ", SI(p,r,t))
print("Compound Intrest : ", CI(p,r,t))

"""without function"""

p = float(input("Enter the principal amount : "))
r = float(input("Enter the rate :"))
t = float(input("Enter the time :"))
SI=(p*r*t)/100
CI=p*(1+(r/100))**t - p
print("Simpe Intrest : ", SI)
print("Compound Intrest : ", CI)

"""#Question 3

with function
"""

def perfect_square(x):
  if x>0:
    n= int(x**0.5)
    return (n*n == x)
  else:
    return False
x= 32
if perfect_square(x):
  print("Yes")
else:
  print("No")

"""Without function"""

x=36
if x>0:
  n=int(x**0.5)
  if (n*n == x):
    print("Yes")
  else:
    print("No")
else:
  print("No")

"""#Question 4

with function
"""

def toWord(n):
  d_to_word = {'0': 'Zero', '1': 'One', '2': 'Two', '3': 'Three', '4' : 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}
  words=[]
  for digit in str(n):
    if digit in d_to_word:
      words.append(d_to_word[digit])
  return '-'.join(words)
print(toWord(89))
print(toWord(389))

"""without function"""

number = input("Enter the number : ")
d_to_word = {'0': 'Zero', '1': 'One', '2': 'Two', '3': 'Three', '4' : 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}
words=[]
for digit in str(number):
  if digit in d_to_word:
    words.append(d_to_word[digit])
print('-'.join(words))

"""# Question 5

With function
"""

def branch_one(total_stock, sold_stocks):
    available_stock = total_stock - sold_stocks
    print("Branch One : Available Stock: " ,available_stock)

def branch_two(total_stock, sold_stocks):
    available_stock = total_stock - sold_stocks
    print("Branch Two : Available Stock: ",available_stock)

def branch_three(total_stock, sold_stocks):
    available_stock = total_stock - sold_stocks
    print("Branch Three : Available Stock: ",available_stock)

def branch_four(total_stock, sold_stocks):
    available_stock = total_stock - sold_stocks
    print("Branch four : Available Stock: ",available_stock)

branch_one(total_stock=100, sold_stocks=30)
branch_two(total_stock=100, sold_stocks=50)
branch_three(total_stock=100, sold_stocks=20)
branch_four(total_stock=100, sold_stocks=40)

"""without function"""

print("Stock available out of 100 percent ")
branch_1_stock = float(input("Enter the stock  left of branch 1 : "))
branch_2_stock = float(input("Enter the stock  left of branch 2 : "))
branch_3_stock = float(input("Enter the stock  left of branch 3 : "))
branch_4_stock = float(input("Enter the stock  left of branch 4 : "))

print("\nStock available in each branch after sell :")
print("Branch 1 : ", branch_1_stock)
print("Branch 2 : ", branch_2_stock)
print("Branch 3 : ", branch_3_stock)
print("Branch 4 : ", branch_4_stock)